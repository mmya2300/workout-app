{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nexport default function WeightExercise(props) {\n  _s();\n  // Destructure the props to extract the name and image\n  const {\n    name,\n    img\n  } = props.selectedWorkout;\n\n  // State variables to keep track of the input values and exercise state\n  const [weight, setWeight] = useState(0);\n  const [reps, setReps] = useState(0);\n  const [holdTime, setHoldTime] = useState(0);\n  const [isLifting, setIsLifting] = useState(false);\n  const [isHolding, setIsHolding] = useState(false);\n  const [isBreaking, setIsBreaking] = useState(false);\n  const [timer, setTimer] = useState(0);\n\n  // Function to handle the form submission\n  const handleSubmit = event => {\n    event.preventDefault(); // prevent the default form submission behavior\n    setIsLifting(true); // start lifting\n    setTimer(3); // set countdown to 3 seconds\n  };\n\n  // Function to handle the weight input change\n  const handleWeightChange = event => {\n    setWeight(event.target.value);\n  };\n\n  // Function to handle the reps input change\n  const handleRepsChange = event => {\n    setReps(event.target.value);\n  };\n\n  // Function to handle the hold time input change\n  const handleHoldTimeChange = event => {\n    setHoldTime(event.target.value);\n  };\n\n  // Countdown effect for lifting\n  useEffect(() => {\n    let timerId;\n    if (isLifting && timer > 0) {\n      timerId = setTimeout(() => {\n        setTimer(timer - 1);\n      }, 1000);\n    } else if (isLifting && timer === 0) {\n      setIsLifting(false);\n      setIsHolding(true);\n      setTimer(holdTime); // start holding for the specified hold time\n    }\n\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [isLifting, holdTime, timer]);\n  useEffect(() => {\n    let timerId;\n    if (isHolding && timer > 0) {\n      timerId = setTimeout(() => {\n        setTimer(timer - 1);\n      }, 1000);\n    } else if (isHolding && timer === 0) {\n      setIsHolding(false);\n      setIsBreaking(true);\n      setTimer(60); // start break for 60 seconds\n    }\n\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [isHolding, timer]);\n\n  // Countdown effect for breaking\n  useEffect(() => {\n    let timerId;\n    if (isBreaking && timer < 60) {\n      timerId = setTimeout(() => {\n        setTimer(timer + 1);\n      }, 1000);\n    } else if (isBreaking && timer === 60) {\n      setIsBreaking(false);\n      setReps(reps - 1); // increment the reps\n    }\n\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [isBreaking, reps, timer]);\n  const handleRestartClick = () => {\n    setIsBreaking(false);\n    if (reps > 0) {\n      setIsLifting(true);\n      setTimer(3);\n    } else {\n      setReps(0);\n    }\n  };\n\n  // Function to handle the continue button click\n  const handleContinueClick = () => {\n    setIsBreaking(false);\n    setIsLifting(true);\n    setTimer(3);\n  };\n}\n_s(WeightExercise, \"YvEFg3QilhVX2/W/llJ3inYh3R8=\");\n_c = WeightExercise;\nvar _c;\n$RefreshReg$(_c, \"WeightExercise\");","map":{"version":3,"names":["React","useState","useEffect","WeightExercise","props","name","img","selectedWorkout","weight","setWeight","reps","setReps","holdTime","setHoldTime","isLifting","setIsLifting","isHolding","setIsHolding","isBreaking","setIsBreaking","timer","setTimer","handleSubmit","event","preventDefault","handleWeightChange","target","value","handleRepsChange","handleHoldTimeChange","timerId","setTimeout","clearTimeout","handleRestartClick","handleContinueClick"],"sources":["C:/Users/mmya2/github-classroom/UCF-GaiM/dig4639-s23-main-mmya2300/unit1/lab6/src/components/WeightExercise/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nexport default function WeightExercise(props) {\r\n  // Destructure the props to extract the name and image\r\n  const { name, img } = props.selectedWorkout;\r\n\r\n  // State variables to keep track of the input values and exercise state\r\n  const [weight, setWeight] = useState(0);\r\n  const [reps, setReps] = useState(0);\r\n  const [holdTime, setHoldTime] = useState(0);\r\n  const [isLifting, setIsLifting] = useState(false);\r\n  const [isHolding, setIsHolding] = useState(false);\r\n  const [isBreaking, setIsBreaking] = useState(false);\r\n  const [timer, setTimer] = useState(0);\r\n\r\n  // Function to handle the form submission\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault(); // prevent the default form submission behavior\r\n    setIsLifting(true); // start lifting\r\n    setTimer(3); // set countdown to 3 seconds\r\n  };\r\n\r\n  // Function to handle the weight input change\r\n  const handleWeightChange = (event) => {\r\n    setWeight(event.target.value);\r\n  };\r\n\r\n  // Function to handle the reps input change\r\n  const handleRepsChange = (event) => {\r\n    setReps(event.target.value);\r\n  };\r\n\r\n  // Function to handle the hold time input change\r\n  const handleHoldTimeChange = (event) => {\r\n    setHoldTime(event.target.value);\r\n  };\r\n\r\n  // Countdown effect for lifting\r\n  useEffect(() => {\r\n    let timerId;\r\n    if (isLifting && timer > 0) {\r\n      timerId = setTimeout(() => {\r\n        setTimer(timer - 1);\r\n      }, 1000);\r\n    } else if (isLifting && timer === 0) {\r\n      setIsLifting(false);\r\n      setIsHolding(true);\r\n      setTimer(holdTime); // start holding for the specified hold time\r\n    }\r\n    return () => {\r\n      clearTimeout(timerId);\r\n    };\r\n  }, [isLifting, holdTime, timer]);\r\nuseEffect(() => {\r\n    let timerId;\r\n    if (isHolding && timer > 0) {\r\n      timerId = setTimeout(() => {\r\n        setTimer(timer - 1);\r\n      }, 1000);\r\n    } else if (isHolding && timer === 0) {\r\n      setIsHolding(false);\r\n      setIsBreaking(true);\r\n      setTimer(60); // start break for 60 seconds\r\n    }\r\n    return () => {\r\n      clearTimeout(timerId);\r\n    };\r\n  }, [isHolding, timer]);\r\n\r\n  // Countdown effect for breaking\r\n  useEffect(() => {\r\n    let timerId;\r\n    if (isBreaking && timer < 60) {\r\n      timerId = setTimeout(() => {\r\n        setTimer(timer + 1);\r\n      }, 1000);\r\n    } else if (isBreaking && timer === 60) {\r\n      setIsBreaking(false);\r\n      setReps(reps - 1); // increment the reps\r\n    }\r\n    return () => {\r\n      clearTimeout(timerId);\r\n    };\r\n  }, [isBreaking, reps, timer]);\r\n\r\n   const handleRestartClick = () => {\r\n    setIsBreaking(false);\r\n    if (reps > 0) {\r\n      setIsLifting(true);\r\n      setTimer(3);\r\n    } else {\r\n      setReps(0);\r\n    }\r\n  };\r\n\r\n  // Function to handle the continue button click\r\n  const handleContinueClick = () => {\r\n    setIsBreaking(false);\r\n    setIsLifting(true);\r\n    setTimer(3);\r\n  };\r\n \r\n\r\n    }"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,eAAe,SAASC,cAAc,CAACC,KAAK,EAAE;EAAA;EAC5C;EACA,MAAM;IAAEC,IAAI;IAAEC;EAAI,CAAC,GAAGF,KAAK,CAACG,eAAe;;EAE3C;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,CAAC,CAAC;;EAErC;EACA,MAAMqB,YAAY,GAAIC,KAAK,IAAK;IAC9BA,KAAK,CAACC,cAAc,EAAE,CAAC,CAAC;IACxBT,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACpBM,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,CAAC;;EAED;EACA,MAAMI,kBAAkB,GAAIF,KAAK,IAAK;IACpCd,SAAS,CAACc,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC;EAC/B,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAIL,KAAK,IAAK;IAClCZ,OAAO,CAACY,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC;EAC7B,CAAC;;EAED;EACA,MAAME,oBAAoB,GAAIN,KAAK,IAAK;IACtCV,WAAW,CAACU,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC;EACjC,CAAC;;EAED;EACAzB,SAAS,CAAC,MAAM;IACd,IAAI4B,OAAO;IACX,IAAIhB,SAAS,IAAIM,KAAK,GAAG,CAAC,EAAE;MAC1BU,OAAO,GAAGC,UAAU,CAAC,MAAM;QACzBV,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;MACrB,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,MAAM,IAAIN,SAAS,IAAIM,KAAK,KAAK,CAAC,EAAE;MACnCL,YAAY,CAAC,KAAK,CAAC;MACnBE,YAAY,CAAC,IAAI,CAAC;MAClBI,QAAQ,CAACT,QAAQ,CAAC,CAAC,CAAC;IACtB;;IACA,OAAO,MAAM;MACXoB,YAAY,CAACF,OAAO,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAAChB,SAAS,EAAEF,QAAQ,EAAEQ,KAAK,CAAC,CAAC;EAClClB,SAAS,CAAC,MAAM;IACZ,IAAI4B,OAAO;IACX,IAAId,SAAS,IAAII,KAAK,GAAG,CAAC,EAAE;MAC1BU,OAAO,GAAGC,UAAU,CAAC,MAAM;QACzBV,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;MACrB,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,MAAM,IAAIJ,SAAS,IAAII,KAAK,KAAK,CAAC,EAAE;MACnCH,YAAY,CAAC,KAAK,CAAC;MACnBE,aAAa,CAAC,IAAI,CAAC;MACnBE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IAChB;;IACA,OAAO,MAAM;MACXW,YAAY,CAACF,OAAO,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAACd,SAAS,EAAEI,KAAK,CAAC,CAAC;;EAEtB;EACAlB,SAAS,CAAC,MAAM;IACd,IAAI4B,OAAO;IACX,IAAIZ,UAAU,IAAIE,KAAK,GAAG,EAAE,EAAE;MAC5BU,OAAO,GAAGC,UAAU,CAAC,MAAM;QACzBV,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;MACrB,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,MAAM,IAAIF,UAAU,IAAIE,KAAK,KAAK,EAAE,EAAE;MACrCD,aAAa,CAAC,KAAK,CAAC;MACpBR,OAAO,CAACD,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;IACrB;;IACA,OAAO,MAAM;MACXsB,YAAY,CAACF,OAAO,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAACZ,UAAU,EAAER,IAAI,EAAEU,KAAK,CAAC,CAAC;EAE5B,MAAMa,kBAAkB,GAAG,MAAM;IAChCd,aAAa,CAAC,KAAK,CAAC;IACpB,IAAIT,IAAI,GAAG,CAAC,EAAE;MACZK,YAAY,CAAC,IAAI,CAAC;MAClBM,QAAQ,CAAC,CAAC,CAAC;IACb,CAAC,MAAM;MACLV,OAAO,CAAC,CAAC,CAAC;IACZ;EACF,CAAC;;EAED;EACA,MAAMuB,mBAAmB,GAAG,MAAM;IAChCf,aAAa,CAAC,KAAK,CAAC;IACpBJ,YAAY,CAAC,IAAI,CAAC;IAClBM,QAAQ,CAAC,CAAC,CAAC;EACb,CAAC;AAGC;AAAC,GArGmBlB,cAAc;AAAA,KAAdA,cAAc;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}